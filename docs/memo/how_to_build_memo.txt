바이브 코딩으로 웹 / 앱 개발을 진행할 때 필요한 작업.

A. 기술 스택 정하기
구체화를 할 때 중요한 것은 '어떤 것을 만드느냐' 이다.
이를 구체화를 해야 '어떤 언어' 를 쓸지, '어떤 아키텍쳐'를 설계할 지, '어떤 기술 스택' 을 정할지가 구체화 될 수 있다.

이를 바탕으로 나오면 좋을 산출물은
1. 아이디어 스캐치
2. 기술 스택
3. 디렉토리 구조 및 아키텍쳐 설계서

B. 흐름 정하기
'플로우 차트', 'ERD' 등등 설계의 흐름을 따라 어떤 기능들이 요구되고 화면 구조를 어떻게 가져가야 효과적인지를 정하는 파트.
작업을 경험해 본 결과, 기본적으로 '어떤 화면이 요구될까' 를 먼저 생각하고 디테일을 정하면 수월하다.

이를 바탕으로
'프론트 영역의 요소' 를 먼저 픽스해서, 테스트 화면에서 디테일을 조정하고, 흐름대로 재배치를 하는게 좋다.
자세하게 말해보자면, '핵심이 되는 기능' 을 담은 페이지와 그 영역 까지 도달하기 위한 부가적으로 존재해야 하는 페이지들을
먼저 구상을 한 후에, 처음 진입부터 '핵심 페이지' 까지 도달하는 일련의 시뮬레이션을 통해
각각 어떤 기능들이 요구되는지를 파악하고, 효과적인 디자인은 어떻게 수정을 해야 할지를 구체적으로 분석할 수 있기에
'기능이 없는 뼈대만 존재하는 페이지 생성' 이 효과적인 작업이라 할 수 있다.

!!!!!
디자인 작업을 수월하게 진행하기 위해서는 '시각적인 자료' 가 있으면 정말 효율적이다.
특히나 수정을 거쳐야 하는 작업에서는 말로써 전달이 되는 것에는 한계가 있기 때문에
원하는 디자인을 담고 있는 이미지들이나, 적절한 이미지 자료들을 수집하여
AI에게 전달을 하면 적극적으로 반영을 해 주니, 디자인의 영역에서는 시각적인 자료가 거의 필수적이라고 생각한다.

C. 기능 구현

기능을 구현하는 데에는 크게 세 가지 영역으로 나누고 싶다.

1. UI와 관련된 기능
토글 버튼이라던가 상태를 변화시킬 수 있는 버튼, 또는 입력 폼.
페이지의 라우팅과 관련된 기능.

이는 디자인을 구체화 시키는 작업에서 병렬적으로 진행할 수 있는 작업이다.
직접적으로 사용을 해 보면서 테스트를 해야 하기도 하고, 디자인적인 '이유' 가 필요하기 때문이다.



2. 문제 해결을 위한 기능
서비스에서 궁극적으로 제공하고자 하는 기능을 구현하는 영역이다.
이는 화면의 요소 같은 '보여지는' 요소들이 변경되어도 전혀 영향을 받지 않아야 한다는 원칙이 있다.
궁극적으로 어떤 기능이 구현되어야 하는 지는 어떤 방식으로 보여져야 하는지가 중요하기도 하지만,
'사용자의 요구 사항을 얼마나 깔끔하고 정교하게 해결해 줄 수 있는지' 를 우선적으로 생각하여야 한다.

1번의 경우에는 망가지면 얼마든지 고칠 수 있고 교체할 수 있지만
이 '문제 해결을 위한 기능' 이 망가지면, 이는 '엔진 없는 멋들어진 차체' 에 불과한 서비스일 것이기 때문이다...

이 '핵심 기능' 은 소스코드를 짤 때에도, 아키텍쳐를 설계할 때 에도 항상 '유지 보수' 가 수월하게 진행될 수 있게끔 신경을 써야 한다.

이를 위해서는 '요구 사항의 정확한 파악' 과 '솔루션의 논리를 탄탄하게 설계' 하여야 하는 원칙을 지킬 수 있도록 한다.



3. UX와 관련된 기능.

이는 1번의 'UI와 관련된 기능' 과 비슷해 보이지만, 단계적으로 보면 다르다고 볼 수 있다.

나의 경우에는 1번의 UI의 기능 구현을 초기의 '화면 설계서' 와 'Flow Chart'를 작성하는 느낌으로 화면의 골격을 설계하는 단계에서
진행을 하고

UX와 관련된 기능은 1번과 2번을 어느 정도 구현을 끝낸 후에 디버깅을 하면서
'실제 사용자의 측면에서 진행되는 시뮬레이션' 으로 테스트를 진행하면서 느껴지는 아쉬움들을 적극 반영하면서 기능 구현을 한다.

디자인적으로 만족스러웠지만, 실제 기능이 구현된 서비스를 사용하면서 뒤늦게 발견되는 아쉬운 점들 이라던가
실제 기능을 맛있게 살리지 못하는 디자인적인 아쉬움을 채우는,

예를 들어 화면을 전환할 때의 부드러움을 위한 로딩 페이지의 부재라던가
기능이 동작할 때 동적인 요소가 부족하여 애니메이션 효과를 추가하여야 한다는 피드백을 진행하면서 채워야 하는 기능이
'UX와 관련된 기능' 이라고 칭하고 싶다. 