---
description: 
globs: 
alwaysApply: true
---
# 프로젝트 규칙: React Native 프론트엔드 개발 가이드

이 문서는 Cursor AI가 '텍스트 기반 TRPG 모바일 게임' 프론트엔드 코드베이스에 기여할 때 따라야 할 구조 및 디자인 지침을 제공합니다.

---

## 1. 프로젝트 소스 코드 루트

* **지침:** 애플리케이션의 모든 소스 코드는 `src/` 디렉토리 아래에 위치해야 합니다.
* **주의:** `node_modules/`, `android/`, `ios/`와 같은 빌드 및 플랫폼 관련 폴더는 `src/` 외부에 유지됩니다.

---

## 2. 핵심 폴더 구조 및 역할

파일은 다음 폴더 역할에 따라 분류되어야 합니다:

* **`src/assets/`**: 정적 자산 (이미지, 폰트, 오디오)을 저장합니다. `images/`, `fonts/`, `icons/`, `audio/`와 같은 하위 폴더를 권장합니다.
* **`src/components/`**: 재사용 가능한 UI 컴포넌트 (스크린에 종속되지 않는 독립적인 컴포넌트)를 저장합니다. `common/`, `layout/`, `form/` 등으로 세분화합니다. 특정 게임 관련 컴포넌트도 여기에 분류될 수 있습니다 (예: `components/game/PlayerBar.tsx`).
* **`src/constants/`**: 앱 전반에 걸쳐 사용되는 고정 상수 (API 엔드포인트, 게임 설정값 등)를 정의합니다.
* **`src/features/`**: (선택적) 대규모 기능 단위로 관련 스크린, 컴포넌트, 로직을 묶습니다. (예: `src/features/Auth/`, `src/features/GameCore/`).
* **`src/hooks/`**: 재사용 가능한 커스텀 React Hooks를 정의합니다. (예: `useAuth.ts`, `useGameSave.ts`).
* **`src/navigation/`**: React Navigation 흐름 (네비게이터 스택, 라우터 정의)을 관리합니다.
* **`src/screens/`**: 개별 화면 컴포넌트를 정의합니다. `auth/`, `game/`, `player/`, `utility/` 등 기능별 하위 폴더로 세분화합니다.
* **`src/services/`**: 외부 API 호출 및 데이터베이스 연동 로직을 담당합니다. (예: `authApi.ts`, `gameApi.ts`).
* **`src/store/`**: 전역 상태 관리 (Redux 등) 관련 파일 (예: `slices/`, `middlewares/`, `index.ts`)을 포함합니다.
* **`src/styles/`**: 공통 스타일 정의 파일 (예: `globalStyles.ts`)을 저장합니다.
* **`src/theme/`**: 앱의 전체 디자인 테마 (색상 팔레트, 폰트 시스템, 테마 컨텍스트)를 정의하고 관리합니다.
* **`src/types/`**: 모든 커스텀 TypeScript 타입 및 인터페이스를 정의합니다.
* **`src/utils/`**: 범용적인 헬퍼 함수 (날짜 포맷팅, 유효성 검사 등)를 저장합니다.

---

## 3. 코드 디자인 설계 지침 (모범 사례 및 권장 사항)

Cursor AI는 다음 지침을 엄격히 준수하여 코드의 **품질**, **가독성**, **유지보수성**, 그리고 **성능**을 최적화해야 합니다.

---

### 3.1. 컴포넌트 설계 원칙

* **단일 책임 원칙 (SRP) 준수**:
    * 각 컴포넌트는 오직 **하나의 명확한 책임** (예: 데이터 표시, 사용자 입력 처리, 특정 UI 요소 렌더링)만 가져야 합니다.
    * **로직이 복잡해지면** 해당 로직을 **커스텀 훅(`src/hooks/`)**이나 **유틸리티 함수(`src/utils/`)**로 분리합니다.
* **재사용성 극대화**:
    * 컴포넌트는 **Props를 통해** 다양한 상황에서 재사용될 수 있도록 **유연하게 설계**합니다.
    * **Props의 타입을 TypeScript로 명확하게 정의**하여 사용법을 안내합니다.
* **Dumb (Presentational) vs. Smart (Container) 컴포넌트**:
    * `src/components/` 내부의 컴포넌트는 주로 **UI 렌더링에 집중하는 'Dumb' 컴포넌트**가 되도록 합니다.
    * **데이터 페칭이나 복잡한 상태 관리 로직**은 **스크린 컴포넌트 또는 커스텀 훅에서 처리**하여 'Dumb' 컴포넌트로 Props를 통해 전달합니다.
* **불필요한 리렌더링 방지**:
    * `React.memo`를 사용하여 **Props가 변경되지 않는 한 컴포넌트의 리렌더링을 건너뛸 수 있도록** 합니다. (단, 남용하지 않고 필요할 때 사용합니다.)
    * 컴포넌트 내에서 함수를 정의할 때는 **`useCallback`을 사용하여** Props로 전달되는 함수가 불필요하게 **재생성되지 않도록** 합니다.
    * **복잡한 계산 결과는 `useMemo`를 사용하여 캐싱**합니다.

---

### 3.2. 스크린 설계 원칙

* **함수형 컴포넌트 및 React Hooks 사용**:
    * 모든 스크린 컴포넌트는 **함수형 컴포넌트로 작성**하고, 상태 관리 및 사이드 이펙트는 **React Hooks** (`useState`, `useEffect`, `useCallback`, `useMemo`, `useNavigation`, `useRoute`, `useTheme`, `useSelector`, `useDispatch` 등)를 활용합니다.
* **명확한 임포트 순서**:
    * 파일 상단의 임포트 구문은 다음 **순서로 정렬**합니다:
        1.  `React` 및 내장 Hooks (`React, { useState, useEffect, useCallback, useMemo }`)
        2.  `react-native` 핵심 컴포넌트
        3.  `@react-navigation` 관련 Hooks 및 타입
        4.  외부 UI/유틸리티 라이브러리 (예: `react-native-vector-icons`, `react-native-paper` 컴포넌트)
        5.  Redux 등 외부 상태 관리 라이브러리
        6.  프로젝트 내부 `components/` (예: `GlassmorphismBackground`, `ScreenHeader`, `ThemedTextInput`)
        7.  프로젝트 내부 `theme/`, `types/`, `styles/`, `utils/` 등 유틸리티
    * **각 섹션 내에서는 알파벳 순서를 유지**합니다.
* **로직 분리 및 책임**:
    * 스크린 파일은 주로 **UI 구성, 상태 변수 선언, 이벤트 핸들러 연결에 집중**합니다.
    * **데이터 페칭, 복잡한 비즈니스 로직, 재사용 가능한 상태 로직 등**은 `src/services/` (API 호출), `src/hooks/` (커스텀 훅), `src/store/` (전역 상태 관리)로 **분리**합니다.
* **네비게이션 처리**:
    * `useNavigation` 훅을 사용하여 **화면 간 이동을 처리**합니다.
    * `route.params`를 사용하는 경우 **`RouteProp` 타입을 명확히 정의**합니다.
* **에러 핸들링**:
    * **비동기 작업(API 호출 등)에는 `try-catch` 블록을 사용**하여 에러를 안전하게 처리하고 사용자에게 적절한 피드백(Alert 등)을 제공합니다.

---

### 3.3. 스타일 디자인 원칙

* **테마 시스템 적극 활용**:
    * `useTheme` 훅을 통해 가져온 **`theme` 객체** (예: `theme.colors`, `theme.typography`, `theme.design.spacing`, `theme.design.borderRadius`, `theme.design.shadows`)를 사용하여 **모든 스타일을 정의**합니다.
    * **하드코딩된 색상 코드, 폰트 크기, 간격 값 사용을 지양**하고 `theme` 변수를 사용합니다.
* **`StyleSheet.create`의 위치 및 사용법**:
    * 모든 스크린 및 컴포넌트의 스타일은 **컴포넌트 함수 외부에 `StyleSheet.create`로 정의**합니다.
    * `useTheme` 훅을 사용하는 컴포넌트에서는 `const styles = useMemo(() => getStyles(theme, mode), [theme, mode]);`와 같이 **`getStyles` 함수를 컴포넌트 외부에 정의하고 `useMemo`로 캐싱하여 사용**합니다. (이렇게 하면 `theme` 객체를 스타일 내부에서 직접 참조할 수 있습니다.)
* **공통 스타일 재사용**:
    * `src/styles/globalStyles.ts` 파일에 정의된 **공통 스타일을 적극적으로 가져와 사용**합니다. (예: `...globalStyles.primaryButton`, `...globalStyles.sectionTitle`).
    * 공통 스타일을 확장하거나 덮어쓸 필요가 있을 때만 스크린/컴포넌트 내에서 추가 스타일을 정의합니다.
* **조건부 스타일 처리**:
    * **`Platform.select`를 사용하여 플랫폼별 스타일을 처리**하고, 가능한 한 `StyleSheet` 내부에서 테마 변수를 활용하여 JSX 내부의 스타일 속성이 간결하게 유지되도록 합니다.
    * `mode`에 따른 색상 변화는 `theme.colors.text`처럼 `theme` 객체 내에서 이미 처리되도록 합니다.

---

### 3.4. TypeScript 활용 원칙

* **강력한 타입 안정성**:
    * 모든 파일에서 **TypeScript를 사용하여 변수, 함수 인자, 반환 값, 상태 등에 대한 타입을 명확하게 정의**합니다.
    * 이를 통해 개발 단계에서 **잠재적인 오류를 미리 방지하고 코드의 견고성을 높입니다**.
* **중앙 집중식 타입 정의**:
    * 앱 전체에서 재사용되는 모든 커스텀 타입 및 인터페이스는 **`src/types/` 폴더에 정의**하고, 필요에 따라 하위 파일로 분류합니다 (예: `src/types/navigation.ts`, `src/types/game.ts`, `src/types/user.ts`).
* **명확한 명명 규칙**:
    * 인터페이스는 `I` 접두사 없이 **파스칼 케이스(PascalCase)로**, 타입 별칭은 파스칼 케이스 또는 카멜 케이스(camelCase)로 명확하게 명명합니다. (예: `interface User`, `type RootStackParamList`).

---

### 3.5. 기타 모범 사례

* **주석 및 문서화**:
    * **복잡한 로직, 비즈니스 규칙, 비직관적인 코드에는 명확하고 간결한 주석을 추가**합니다.
    * **컴포넌트 Props, 함수 인자 등에 대한 JSDoc 스타일 주석**을 사용하여 코드 자동 완성 및 문서화를 돕습니다.
* **성능 최적화**:
    * 불필요한 `console.log`는 제거하거나 개발 환경에서만 활성화되도록 관리합니다.
    * 대규모 리스트 렌더링 시 **`FlatList` 또는 `SectionList`를 사용**하고 `keyExtractor`를 올바르게 구현합니다.
* **일관된 네이밍 컨벤션**:
    * 변수, 함수, 컴포넌트, 파일명 등에 **일관된 네이밍 컨벤션**(예: 카멜 케이스, 파스칼 케이스, 스네이크 케이스)을 적용합니다.
* **테스트 용이성**:
    * **로직을 컴포넌트에서 분리**하여 테스트하기 쉬운 단위로 만듭니다. (예: 순수 함수, 커스텀 훅).
---

## 4. 커밋 및 적용

* 이 내용을 `frontend.mdc` 파일에 붙여넣고 저장합니다.
* 해당 파일이 `project Rules` 설정에서 'Always'로 선택되어 있는지 다시 한번 확인합니다.
* 변경 사항을 Git에 커밋하여 팀원들과 공유하고, AI가 지속적으로 이 규칙을 따르도록 합니다.

---


이처럼 마크다운 형식으로 규칙을 작성하면 Cursor AI가 코드 작업을 수행할 때 이 지침을 참고하여 여러분의 프로젝트 컨벤션에 맞는 코드를 생성하고 수정할 수 있을 것입니다.