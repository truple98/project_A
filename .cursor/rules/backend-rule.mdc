---
alwaysApply: true
---

백엔드 프로젝트 규칙: Node.js, Express.js, TypeScript 개발 가이드
이 문서는 Cursor AI가 Node.js, Express.js, TypeScript 기반의 백엔드 코드베이스에 기여할 때 따라야 할 구조 및 디자인 지침을 제공합니다. 이는 계층형 아키텍처를 기반으로 하며, 코드의 품질, 가독성, 유지보수성 및 성능을 최적화하는 것을 목표로 합니다.

1. 백엔드 프로젝트 개요 및 아키텍처 원칙
계층형 아키텍처 (Layered Architecture):

애플리케이션의 관심사를 기술적 역할(컨트롤러, 서비스, 라우트, 미들웨어 등)에 따라 계층으로 분리하여 코드를 구성합니다.

요청은 routes -> middlewares -> controllers -> services -> prisma 순으로 처리되는 수직적 흐름을 가집니다.

이 접근 방식은 각 계층의 역할을 명확히 하고, 유지보수를 용이하게 하며, 대부분의 개발자에게 익숙한 구조를 제공합니다.

단일 책임 원칙 (SRP): 모든 파일, 함수, 클래스는 단 하나의 명확한 책임만을 가져야 합니다.

DRY (Don't Repeat Yourself): 코드 중복을 피하십시오. 재사용 가능한 로직은 shared/ 또는 utils/로 추출하십시오.

모듈성 및 재사용성: 복잡한 로직을 더 작고, 테스트 가능하며, 재사용 가능한 모듈/함수로 분해하십시오.

가독성 및 일관성:

명명 규칙:

클래스/주요 모듈 파일 (컨트롤러, 서비스, 라우트 등): PascalCase를 사용합니다 (예: UserController.ts, UserService.ts, UserRoutes.ts).

기타 일반 파일/폴더: kebab-case를 사용합니다 (예: auth-middleware.ts, date-utils.ts, error-handler.ts).

변수/함수 명명: camelCase를 사용합니다 (예: getUserById, createProduct).

상수 명명: UPPER_SNAKE_CASE를 사용합니다 (예: HTTP_STATUS_CODES, JWT_SECRET).

인터페이스/타입 명명: I 접두사를 사용하지 않고 PascalCase를 사용하며, 필요에 따라 Dto, Request, Response 접미사를 사용합니다 (예: User, CreateUserDto, UserResponse).

일관된 코드 서식 (예: Prettier 사용)을 유지하십시오.

복잡한 로직에는 주석을 추가하되, 자체 설명적인 코드를 우선시하십시오.

TypeScript 우선: 모든 파일은 강력한 타입 지정 및 코드 품질 향상을 위해 TypeScript (.ts)를 사용해야 합니다. 함수 인수, 반환 값 및 데이터 구조에 대해 명시적인 타입을 정의하십시오.

에러 처리 철학:

HTTP 에러(4xx, 5xx)와 비즈니스 로직 에러를 명확히 구분합니다.

서비스 계층에서는 비즈니스 로직 에러 발생 시 사용자 정의 에러를 throw하고, 컨트롤러 또는 전역 에러 핸들러에서 이를 catch하여 적절한 HTTP 응답으로 변환합니다.

에러 발생 시 로그에 요청 ID, 에러 메시지, 스택 트레이스 등 디버깅에 필요한 모든 정보를 남깁니다.

2. 권장 폴더 구조 (src/)
주요 소스 코드는 src/에 위치합니다.

src/controllers/:

목적: HTTP 요청 핸들러. 파일명은 [도메인]Controller.ts (예: UserController.ts).

src/services/:

목적: 비즈니스 로직, 데이터 조작, 외부 서비스 호출. 파일명은 [도메인]Service.ts (예: UserService.ts).

src/routes/:

목적: API 엔드포인트에 대한 Express 라우터 정의. 파일명은 [도메인]Routes.ts (예: UserRoutes.ts).

src/middlewares/:

목적: 공통 Express 미들웨어 (인증, 로깅, CORS, 속도 제한 등). 파일명은 auth-middleware.ts, logger-middleware.ts 등.

src/types/:

목적: 프로젝트 전반에서 사용되는 TypeScript 타입 정의. 파일명은 [도메인]Types.ts (예: UserTypes.ts) 또는 global-types.ts.

src/validations/:

목적: 입력 유효성 검사 스키마/로직. 파일명은 [도메인]Validation.ts (예: UserValidation.ts).

src/constants/:

목적: 전역 상수 (예: HTTP 상태 코드, 공통 메시지). 파일명은 index.ts 또는 constants.ts.

src/shared/:

목적: 모든 계층에서 공통으로 사용되는 유틸리티, 구성 및 에러 처리 모듈. 여기의 코드는 특정 계층이나 도메인에 대한 종속성을 가져서는 안 됩니다.

내용:

config/: 환경 변수 로딩 및 애플리케이션 전반의 구성. 파일명은 index.ts 또는 config.ts.

errors/: 사용자 정의 에러 클래스 및 중앙 집중식 에러 처리 미들웨어. 파일명은 api-error.ts, not-found-error.ts, bad-request-error.ts, error-handler.ts 등.

utils/: 일반 유틸리티 함수 (예: 날짜 형식 지정, 암호화 도우미). 파일명은 date-utils.ts, crypto-utils.ts, pagination-utils.ts 등.

src/app.ts: 주요 Express 애플리케이션 설정, 전역 미들웨어 및 모든 라우트 등록.

src/server.ts: HTTP 서버를 시작하는 역할을 하는 애플리케이션 진입점.

prisma/: Prisma 스키마 (schema.prisma), 마이그레이션, 시드(seed) 파일 등 데이터베이스 관련 파일.

3. 코드 디자인 가이드라인 (모범 사례 및 권장 사항)
Cursor AI는 다음 지침을 엄격히 준수하여 코드의 품질, 가독성, 유지보수성, 그리고 성능을 최적화해야 합니다.

3.1. 컨트롤러 설계 원칙
얇은 컨트롤러 (Thin Controllers) 준수:

컨트롤러는 가볍게 유지되어야 합니다. 요청 구문 분석, 입력 유효성 검사 (또는 유효성 검사 미들웨어에 위임), 적절한 서비스 호출 및 HTTP 응답 전송만 처리해야 합니다. 비즈니스 로직을 직접 수행하지 마십시오.

로직이 복잡해지면 해당 로직을 **서비스(src/services/)**나 **유틸리티 함수(src/shared/utils/)**로 분리합니다.

응답 형식: 성공/실패 응답에 대한 표준 JSON 형식을 따릅니다.

// src/controllers/UserController.ts
import { Request, Response, NextFunction } from 'express';
import { userService } from '../services/UserService'; // 서비스 인스턴스 주입

export class UserController {
    public async createUser(req: Request, res: Response, next: NextFunction) {
        try {
            const newUser = await userService.createUser(req.body);
            res.status(201).json({ success: true, data: newUser, message: '사용자가 성공적으로 생성되었습니다.' });
        } catch (error) {
            next(error); // 에러 핸들링 미들웨어로 전달
        }
    }
    // ... 기타 메서드
}
export const userController = new UserController();

의존성 주입: 서비스 인스턴스를 컨트롤러에 직접 import하여 사용하거나, 더 복잡한 경우 생성자 주입 패턴을 고려할 수 있습니다.

3.2. 서비스 설계 원칙
비즈니스 로직 핵심:

서비스는 모든 핵심 비즈니스 로직을 캡슐화합니다. 데이터 계층 (Prisma) 및 다른 서비스와 상호 작용합니다.

프레임워크 독립적: 서비스는 Express req/res 객체에 직접적인 종속성을 가져서는 안 됩니다.

데이터 접근: Prisma 클라이언트를 사용하여 데이터베이스 작업을 수행합니다. 복잡한 데이터베이스 작업은 repositories/ 폴더를 추가하여 추상화할 수 있습니다.

// src/services/UserService.ts
import { prisma } from '../shared/config/prisma-client'; // Prisma 클라이언트 주입
import { NotFoundError, BadRequestError } from '../shared/errors';
import { CreateUserDto, User } from '../types/UserTypes';

export class UserService {
    public async createUser(userData: CreateUserDto): Promise<User> {
        // 비즈니스 로직 예시: 사용자 이름 중복 확인
        const existingUser = await prisma.user.findUnique({ where: { email: userData.email } });
        if (existingUser) {
            throw new BadRequestError('이미 존재하는 이메일입니다.');
        }
        const newUser = await prisma.user.create({ data: userData });
        return newUser;
    }

    public async getUserById(id: string): Promise<User> {
        const user = await prisma.user.findUnique({ where: { id } });
        if (!user) {
            throw new NotFoundError(`ID가 ${id}인 사용자를 찾을 수 없습니다.`);
        }
        return user;
    }
    // ... 기타 비즈니스 로직
}
export const userService = new UserService();

트랜잭션 관리: 여러 데이터베이스 작업이 하나의 논리적 단위로 묶여야 할 경우, 서비스 계층에서 Prisma의 $transaction을 사용하여 트랜잭션을 관리합니다.

에러 전파: 비즈니스 규칙 위반 또는 예상치 못한 문제 발생 시 명확하고 설명적인 사용자 정의 에러를 던져 컨트롤러 또는 전역 에러 핸들러에서 처리할 수 있도록 합니다.

3.3. 라우트 설계 원칙
API 엔드포인트 정의: Express Router를 사용하여 API 엔드포인트를 정의합니다.

미들웨어 체이닝: 유효성 검사, 인증 및 권한 부여 미들웨어를 컨트롤러 함수 앞에 체인으로 적용합니다.

라우트 그룹핑: 각 도메인의 [도메인]Routes.ts 파일에서 express.Router() 인스턴스를 생성하고, src/app.ts에서 이를 통합합니다.

API 버전 관리: 필요시 URL 기반 버전 관리 (/api/v1/users) 또는 헤더 기반 버전 관리를 고려합니다.

// src/routes/UserRoutes.ts
import { Router } from 'express';
import { userController } from '../controllers/UserController';
import { validate } from '../middlewares/validation-middleware'; // 유효성 검사 미들웨어
import { createUserSchema } from '../validations/UserValidation'; // 유효성 검사 스키마
import { authenticate } from '../middlewares/auth-middleware'; // 인증 미들웨어

const router = Router();

router.post('/', validate(createUserSchema), userController.createUser);
router.get('/:id', authenticate, userController.getUserById); // 인증 미들웨어 적용

export default router;

3.4. 타입 정의 원칙
명시적 타입 지정: 모든 함수 매개변수, 반환 값 및 데이터 구조는 TypeScript 인터페이스 또는 타입을 사용하여 명시적으로 타입이 지정되어야 합니다.

일관성: 타입에 대한 일관된 명명 규칙을 유지하십시오 (예: User, ProductDto).

DTO (Data Transfer Object) 정의: 요청/응답 데이터에 대한 DTO 인터페이스 또는 타입을 명확히 정의합니다.

// src/types/UserTypes.ts
export interface User {
    id: string;
    email: string;
    name?: string;
    createdAt: Date;
    updatedAt: Date;
}

export interface CreateUserDto {
    email: string;
    password?: string; // 비밀번호는 서비스에서 해싱되므로 DTO에 포함될 수 있음
    name?: string;
}

export interface UserResponse {
    id: string;
    email: string;
    name?: string;
}

공통 타입 vs 도메인별 타입: src/types/ 내에 global-types.ts와 같이 프로젝트 전반에서 사용되는 공통 타입(예: RequestWithUser, ApiResponse)을 정의하고, 도메인별 타입은 UserTypes.ts와 같이 별도로 관리합니다.

3.5. 유효성 검사 원칙
라이브러리 선택: Zod 또는 Joi와 같은 스키마 기반 유효성 검사 라이브러리를 사용합니다. Zod를 권장합니다.

스키마 정의: 들어오는 요청 데이터 (본문, 매개변수, 쿼리)에 대한 유효성 검사 스키마를 정의합니다.

조기 유효성 검사: 요청 수명 주기에서 가능한 한 빨리 유효성 검사를 수행하십시오. 컨트롤러 이전에 미들웨어로 수행하는 것이 좋습니다.

// src/validations/UserValidation.ts
import { z } from 'zod';

export const createUserSchema = z.object({
    body: z.object({
        email: z.string().email('유효한 이메일 주소를 입력해주세요.'),
        password: z.string().min(6, '비밀번호는 최소 6자 이상이어야 합니다.'),
        name: z.string().optional(),
    }),
});

// 유효성 검사 미들웨어 (src/middlewares/validation-middleware.ts)
// import { Request, Response, NextFunction } from 'express';
// import { AnyZodObject } from 'zod';
// import { BadRequestError } from '../shared/errors';

// export const validate = (schema: AnyZodObject) =>
//     (req: Request, res: Response, next: NextFunction) => {
//         try {
//             schema.parse({
//                 body: req.body,
//                 query: req.query,
//                 params: req.params,
//             });
//             next();
//         } catch (error: any) {
//             next(new BadRequestError(error.errors[0].message || '유효성 검사 실패'));
//         }
//     };

3.6. 에러 처리 원칙
커스텀 에러 클래스: 의미 있는 에러 정보를 제공하기 위해 ApiError를 상속받는 NotFoundError, BadRequestError, UnauthorizedError 등의 클래스를 정의합니다.

// src/shared/errors/api-error.ts
export class ApiError extends Error {
    statusCode: number;
    isOperational: boolean; // 운영상 에러인지 (예: 사용자 입력 오류)
    constructor(message: string, statusCode: number, isOperational = true) {
        super(message);
        this.statusCode = statusCode;
        this.isOperational = isOperational;
        Error.captureStackTrace(this, this.constructor);
    }
}

// src/shared/errors/not-found-error.ts
import { ApiError } from './api-error';
export class NotFoundError extends ApiError {
    constructor(message = '요청한 리소스를 찾을 수 없습니다.') {
        super(message, 404);
    }
}

// src/shared/errors/bad-request-error.ts
import { ApiError } from './api-error';
export class BadRequestError extends ApiError {
    constructor(message = '잘못된 요청입니다.') {
        super(message, 400);
    }
}

중앙 집중식 미들웨어: src/shared/errors/error-handler.ts에 전역 에러 처리 미들웨어를 구현하여 모든 에러를 catch하고 클라이언트에 일관된 에러 응답을 보냅니다.

// src/shared/errors/error-handler.ts
import { Request, Response, NextFunction } from 'express';
import { ApiError } from './api-error'; // 같은 shared/errors 폴더 내

export const errorHandler = (
    err: Error,
    req: Request,
    res: Response,
    next: NextFunction
) => {
    console.error(err); // 개발 단계에서는 에러 로깅

    if (err instanceof ApiError) {
        return res.status(err.statusCode).json({
            success: false,
            message: err.message,
            // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
        });
    }

    // 예상치 못한 에러 처리 (500 Internal Server Error)
    res.status(500).json({
        success: false,
        message: '서버 오류가 발생했습니다.',
        // stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
    });
};

3.7. 로깅 원칙
일관된 로깅: Winston 또는 Pino와 같은 전용 로깅 라이브러리를 사용하여 일관되고 구조화된 로깅을 구현합니다.

로그 레벨: debug, info, warn, error 등 적절한 로그 레벨을 사용하여 메시지 유형을 구분합니다.

로그 형식: JSON 형식 로깅을 권장하며, 타임스탬프, 로그 레벨, 메시지, 요청 ID, 사용자 ID 등 디버깅에 유용한 정보를 포함합니다.

// src/shared/config/logger.ts (Winston 예시)
import winston from 'winston';

const logger = winston.createLogger({
    level: process.env.NODE_ENV === 'development' ? 'debug' : 'info',
    format: winston.format.combine(
        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console({
            format: winston.format.combine(
                winston.format.colorize(),
                winston.format.simple()
            ),
        }),
        // new winston.transports.File({ filename: 'error.log', level: 'error' }),
        // new winston.transports.File({ filename: 'combined.log' }),
    ],
});

export default logger;

3.8. 환경 변수 관리 원칙
.env 파일: 민감한 정보 및 환경별 구성(예: 데이터베이스 URL, JWT Secret)을 .env 파일에 저장합니다. .env.example 파일을 제공하여 필요한 환경 변수를 명시합니다.

구성 모듈: src/shared/config/index.ts와 같은 전용 구성 모듈을 통해 dotenv를 사용하여 환경 변수를 로드하고 유효성을 검사합니다.

// src/shared/config/index.ts
import dotenv from 'dotenv';
import { z } from 'zod';

dotenv.config(); // .env 파일 로드

const envSchema = z.object({
    PORT: z.string().default('3000'),
    NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),
    DATABASE_URL: z.string(),
    JWT_SECRET: z.string().min(10, 'JWT_SECRET은 최소 10자 이상이어야 합니다.'),
    // ... 기타 환경 변수
});

const parsedEnv = envSchema.safeParse(process.env);

if (!parsedEnv.success) {
    console.error('❌ 유효하지 않은 환경 변수:', parsedEnv.error.flatten().fieldErrors);
    throw new Error('환경 변수 검증 실패');
}

export const config = {
    port: parsedEnv.data.PORT,
    nodeEnv: parsedEnv.data.NODE_ENV,
    databaseUrl: parsedEnv.data.DATABASE_URL,
    jwtSecret: parsedEnv.data.JWT_SECRET,
};

3.9. Prisma 사용 원칙
클라이언트 인스턴스: Prisma Client는 src/shared/config/prisma-client.ts와 같이 단일 파일에서 초기화하고 내보내어 애플리케이션 전반에서 재사용합니다.

스키마 관리: prisma/schema.prisma 파일에 데이터베이스 스키마를 정의하고, 마이그레이션 (npx prisma migrate dev)을 통해 데이터베이스 변경 사항을 관리합니다.
